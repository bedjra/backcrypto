

####### formulaire AJOUT Fournisseurs ##################
@main.route('/add/four', methods=['POST'])
def add_fournisseur():
    try:
        data = request.get_json()

        # V√©rification des champs requis pour le fournisseur
        required_fields = ["nom", "taux_jour", "quantite_USDT", "transaction_id", "beneficiaires"]
        if not all(field in data for field in required_fields):
            return jsonify({"message": "Donn√©es incompl√®tes"}), 400

        # R√©cup√©ration et validation des valeurs
        nom = data["nom"].strip()
        try:
            taux_jour = float(data["taux_jour"])
            quantite_USDT = float(data["quantite_USDT"])
        except ValueError:
            return jsonify({"message": "Taux du jour et quantit√© doivent √™tre des nombres valides"}), 400

        transaction_id = data["transaction_id"]
        beneficiaires_data = data["beneficiaires"]

        # V√©rification des valeurs positives
        if taux_jour <= 0 or quantite_USDT <= 0:
            return jsonify({"message": "Les valeurs du taux et de la quantit√© doivent √™tre positives"}), 400

        # V√©rifier si la transaction existe
        transaction = Transaction.query.get(transaction_id)
        if not transaction:
            return jsonify({"message": "Transaction non trouv√©e"}), 404

        # V√©rifier les b√©n√©ficiaires
        if not isinstance(beneficiaires_data, list) or len(beneficiaires_data) == 0:
            return jsonify({"message": "Au moins un b√©n√©ficiaire est requis"}), 400

        for benef in beneficiaires_data:
            if not all(k in benef for k in ["nom", "commission_USDT"]):
                return jsonify({"message": "Donn√©es du b√©n√©ficiaire incompl√®tes"}), 400
            if not isinstance(benef["nom"], str) or not benef["nom"].strip():
                return jsonify({"message": "Nom du b√©n√©ficiaire invalide"}), 400
            try:
                commission_USDT = float(benef["commission_USDT"])
                if commission_USDT < 0:
                    return jsonify({"message": "La commission doit √™tre un nombre positif"}), 400
            except ValueError:
                return jsonify({"message": "Commission invalide"}), 400

        # Cr√©ation du fournisseur
        new_fournisseur = Fournisseur(
            nom=nom,
            taux_jour=taux_jour,
            quantite_USDT=quantite_USDT,
            transaction_id=transaction_id
        )

        db.session.add(new_fournisseur)
        db.session.flush()  # Permet d'obtenir l'ID avant le commit

        # Cr√©ation des b√©n√©ficiaires associ√©s
        for benef in beneficiaires_data:
            new_benef = Beneficiaire(
                nom=benef["nom"].strip(),
                commission_USDT=float(benef["commission_USDT"]),
                fournisseur_id=new_fournisseur.id
            )
            db.session.add(new_benef)

        db.session.commit()  # Commit tout en une seule transaction

        return jsonify({
            "message": "Fournisseur et b√©n√©ficiaires ajout√©s avec succ√®s",
            "fournisseur": {
                "id": new_fournisseur.id,
                "nom": new_fournisseur.nom,
                "taux_jour": new_fournisseur.taux_jour,
                "quantite_USDT": new_fournisseur.quantite_USDT,
                "transaction_id": new_fournisseur.transaction_id,
                "beneficiaires": [
                    {"id": b.id, "nom": b.nom, "commission_USDT": b.commission_USDT}
                    for b in new_fournisseur.beneficiaires
                ]
            }
        }), 201

    except Exception as e:
        db.session.rollback()  # Annule tout si une erreur survient
        print("üî• Erreur serveur:", str(e))
        return jsonify({"message": "Erreur lors de l'ajout", "error": str(e)}), 500

###############################################
#######  Get all FOURNISS ##################
@main.route('/all/four', methods=['GET'])
def get_all_fournisseurs():
    try:
        # R√©cup√©ration des fournisseurs tri√©s par leur ID r√©el
        fournisseurs = Fournisseur.query.order_by(Fournisseur.id).all()

        # Construction de la r√©ponse
        result = []
        for fournisseur in fournisseurs:
            # R√©cup√©ration des b√©n√©ficiaires associ√©s
            beneficiaires = Beneficiaire.query.filter_by(fournisseur_id=fournisseur.id).all()

            result.append({
                "id": fournisseur.id,  # ID r√©el de la base de donn√©es
                "nom": fournisseur.nom,
                "taux_jour": float(fournisseur.taux_jour),
                "quantite_USDT": float(fournisseur.quantite_USDT),
                "transaction_id": fournisseur.transaction_id,
                "beneficiaires": [
                    {
                        "id": benef.id,
                        "nom": benef.nom,
                        "commission_USDT": float(benef.commission_USDT)
                    } for benef in beneficiaires
                ]
            })

        return jsonify({
            "message": "Liste des fournisseurs r√©cup√©r√©e avec succ√®s",
            "fournisseurs": result
        }), 200

    except Exception as e:
        return jsonify({"message": "Erreur lors de la r√©cup√©ration des fournisseurs", "error": str(e)}), 500


###############################################
#######  Get all fourn NOM ##################
@main.route('/all/four/nom', methods=['GET'])
def get_all_fournisseurs_noms():
    try:
        # R√©cup√©ration des fournisseurs avec uniquement id et nom
        fournisseurs = Fournisseur.query.with_entities(Fournisseur.id, Fournisseur.nom).all()

        # Construction de la r√©ponse
        result = [{"id": fournisseur.id, "nom": fournisseur.nom} for fournisseur in fournisseurs]

        return jsonify({
            "message": "Liste des noms des fournisseurs r√©cup√©r√©e avec succ√®s",
            "fournisseurs": result
        }), 200

    except Exception as e:
        return jsonify({"message": "Erreur lors de la r√©cup√©ration des noms des fournisseurs", "error": str(e)}), 500


############################################
#######  get by id ####################
@main.route('/four/<int:id>', methods=['GET'])
def get_fournisseur_by_id(id):
    try:
        # R√©cup√©ration du fournisseur par ID
        fournisseur = Fournisseur.query.get(id)

        if not fournisseur:
            return jsonify({"message": f"Fournisseur avec l'ID {id} introuvable"}), 404

        # R√©cup√©ration de la transaction associ√©e au fournisseur
        transaction = fournisseur.transaction

        # R√©cup√©ration des b√©n√©ficiaires associ√©s au fournisseur
        beneficiaires = Beneficiaire.query.filter_by(fournisseur_id=fournisseur.id).all()

        # Construction de la r√©ponse
        result = {
            "id": fournisseur.id,
            "nom": fournisseur.nom,
            "taux_jour": float(fournisseur.taux_jour),
            "quantite_USDT": float(fournisseur.quantite_USDT),
            "transaction_id": fournisseur.transaction_id,
            "transaction": {
                "id": transaction.id,
                "montant_FCFA": transaction.montant_FCFA,
                "taux_convenu": transaction.taux_convenu,
                "montant_USDT": float(transaction.montant_USDT),
            } if transaction else None,
            "beneficiaires": [
                {
                    "id": benef.id,
                    "nom": benef.nom,
                    "commission_USDT": float(benef.commission_USDT)
                } for benef in beneficiaires
            ]
        }

        return jsonify({
            "message": "Fournisseur r√©cup√©r√© avec succ√®s",
            "fournisseur": result
        }), 200

    except Exception as e:
        return jsonify({"message": "Erreur lors de la r√©cup√©ration du fournisseur", "error": str(e)}), 500

    try:
        # R√©cup√©ration du fournisseur par ID
        fournisseur = Fournisseur.query.get(id)

        if not fournisseur:
            return jsonify({"message": f"Fournisseur avec l'ID {id} introuvable"}), 404

        # R√©cup√©ration des b√©n√©ficiaires associ√©s au fournisseur
        beneficiaires = Beneficiaire.query.filter_by(fournisseur_id=fournisseur.id).all()

        # Construction de la r√©ponse
        result = {
            "id": fournisseur.id,
            "nom": fournisseur.nom,
            "taux_jour": float(fournisseur.taux_jour),
            "quantite_USDT": float(fournisseur.quantite_USDT),
            "transaction_id": fournisseur.transaction_id,
           
            "beneficiaires": [
                {
                    "id": benef.id,
                    "nom": benef.nom,
                    "commission_USDT": float(benef.commission_USDT)
                } for benef in beneficiaires
            ]
        }

        return jsonify({
            "message": "Fournisseur r√©cup√©r√© avec succ√®s",
            "fournisseur": result
        }), 200

    except Exception as e:
        return jsonify({"message": "Erreur lors de la r√©cup√©ration du fournisseur", "error": str(e)}), 500


###############################################
#######  put four ##################
@main.route('/update/four/<int:id>', methods=['PUT'])
def update_fournisseur(id):
    try:
        data = request.get_json()

        # V√©rifier si le fournisseur existe
        fournisseur = Fournisseur.query.get(id)
        if not fournisseur:
            return jsonify({"message": "Fournisseur non trouv√©"}), 404

        # V√©rification des champs obligatoires
        required_fields = ["nom", "taux_jour", "quantite_USDT", "transaction_id", "beneficiaires"]
        if not all(field in data for field in required_fields):
            return jsonify({"message": "Donn√©es incompl√®tes"}), 400

        # R√©cup√©ration et validation des valeurs
        nom = data["nom"].strip()
        try:
            taux_jour = float(data["taux_jour"])
            quantite_USDT = float(data["quantite_USDT"])
        except ValueError:
            return jsonify({"message": "Taux du jour et quantit√© doivent √™tre des nombres valides"}), 400

        transaction_id = data["transaction_id"]
        beneficiaires_data = data["beneficiaires"]

        # V√©rifier que les valeurs sont positives
        if taux_jour <= 0 or quantite_USDT <= 0:
            return jsonify({"message": "Les valeurs du taux et de la quantit√© doivent √™tre positives"}), 400

        # V√©rifier si la transaction existe
        transaction = Transaction.query.get(transaction_id)
        if not transaction:
            return jsonify({"message": "Transaction non trouv√©e"}), 404

        # V√©rifier les b√©n√©ficiaires
        if not isinstance(beneficiaires_data, list):
            return jsonify({"message": "Format invalide pour les b√©n√©ficiaires"}), 400

        for benef in beneficiaires_data:
            if not all(k in benef for k in ["nom", "commission_USDT"]):
                return jsonify({"message": "Donn√©es du b√©n√©ficiaire incompl√®tes"}), 400
            if not isinstance(benef["nom"], str) or not benef["nom"].strip():
                return jsonify({"message": "Nom du b√©n√©ficiaire invalide"}), 400
            try:
                commission_USDT = float(benef["commission_USDT"])
                if commission_USDT < 0:
                    return jsonify({"message": "La commission doit √™tre un nombre positif"}), 400
            except ValueError:
                return jsonify({"message": "Commission invalide"}), 400

        # Mise √† jour des informations du fournisseur
        fournisseur.nom = nom
        fournisseur.taux_jour = taux_jour
        fournisseur.quantite_USDT = quantite_USDT
        fournisseur.transaction_id = transaction_id

        # Supprimer les anciens b√©n√©ficiaires du fournisseur
        Beneficiaire.query.filter_by(fournisseur_id=id).delete()

        # Ajouter les nouveaux b√©n√©ficiaires
        for benef in beneficiaires_data:
            new_benef = Beneficiaire(
                nom=benef["nom"].strip(),
                commission_USDT=float(benef["commission_USDT"]),
                fournisseur_id=id
            )
            db.session.add(new_benef)

        db.session.commit()  # Commit tout en une seule transaction

        return jsonify({
            "message": "Fournisseur et b√©n√©ficiaires mis √† jour avec succ√®s",
            "fournisseur": {
                "id": fournisseur.id,
                "nom": fournisseur.nom,
                "taux_jour": fournisseur.taux_jour,
                "quantite_USDT": fournisseur.quantite_USDT,
                "transaction_id": fournisseur.transaction_id,
                "beneficiaires": [
                    {"id": b.id, "nom": b.nom, "commission_USDT": b.commission_USDT}
                    for b in fournisseur.beneficiaires
                ]
            }
        }), 200

    except Exception as e:
        db.session.rollback()  # Annule tout en cas d'erreur
        print("üî• Erreur serveur:", str(e))
        return jsonify({"message": "Erreur lors de la mise √† jour", "error": str(e)}), 500

##############################################
#######  DELETE FOUR ##################
@main.route('/delete/four/<int:id>', methods=['DELETE'])
def delete_fournisseur(id):
    fournisseur = Fournisseur.query.get(id)
    if not fournisseur:
        return jsonify({"message": "Fournisseur introuvable"}), 404

    db.session.delete(fournisseur)
    db.session.commit()
    return jsonify({"message": "Fournisseur supprim√© avec succ√®s"}), 200

